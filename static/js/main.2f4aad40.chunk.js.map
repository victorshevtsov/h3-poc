{"version":3,"sources":["components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["containerStyle","width","height","Map","children","center","mapRef","React","useRef","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","onBoundsChanged","console","log","current","onCenterChanged","ref","mapContainerStyle","options","zoom","zoomControlOptions","position","google","maps","ControlPosition","LEFT_CENTER","streetViewControlOptions","LEFT_BOTTOM","styles","featureType","stylers","lat","lng","polyline","h3Index","hexBoundary","h3","push","arr","i","h3ToPolyline","polygonOptions","fillColor","strokeColor","strokeWeight","App","className","opacity","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGMA,EAAsC,CAC1CC,MAAO,OACPC,OAAQ,QAgDKC,MA7Cf,YAAyC,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,OAEjBC,EAASC,IAAMC,OAAkB,MAevC,EAAgCC,YAAc,CAC5CC,iBAAkBC,4CADZC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAIZC,EAAkB,WACtBC,QAAQC,IAAI,kBAAmBV,EAAOW,UAElCC,EAAkB,WACtBH,QAAQC,IAAI,oBAcd,OAAIH,EACK,uDAGFD,EAfiB,mCACtB,cAAC,IAAD,CAAWO,IAAKb,EACdc,kBAAmBpB,EACnBqB,QA1BK,CACLhB,SACAiB,KAAM,GACNC,mBAAoB,CAAEC,SAAUC,OAAOC,KAAKC,gBAAgBC,aAC5DC,yBAA0B,CAAEL,SAAUC,OAAOC,KAAKC,gBAAgBG,aAClEC,OAAQ,CACN,CAAEC,YAAa,MAAOC,QAAS,CAAC,CAAE,WAAc,SAChD,CAAED,YAAa,UAAWC,QAAS,CAAC,CAAE,WAAc,WAoBtDnB,gBAAiBA,EACjBI,gBAAiBA,EAJnB,SAMGd,MAQ2B,sDC7C5BC,EAAS,CACb6B,IAAK,MACLC,KAAM,OAiBR,IAAMC,EAZN,SAAsBC,GACpB,IAAIC,EAAcC,IAAmBF,GACrCC,EAAYE,KAAKF,EAAY,IAE7B,IAJqC,EAIjCG,EAAM,GAJ2B,cAKrBH,GALqB,IAKrC,2BAA6B,CAAC,IAAnBI,EAAkB,QAC3BD,EAAID,KAAK,CAAEN,IAAKQ,EAAE,GAAIP,IAAKO,EAAE,MANM,8BASrC,OAAOD,EAGQE,CAdDJ,IAAWlC,EAAO6B,IAAK7B,EAAO8B,IAAK,IAgB7CS,EAA6C,CACjDC,UAAW,MACXC,YAAa,OACbC,aAAc,GAmBDC,MAhBf,WACE,OACE,sBAAKC,UAAU,MAAf,UAEE,eAAC,EAAD,CAAK5C,OAAQA,EAAb,UACE,cAAC,IAAD,CAAQmB,SAAUnB,EAAQ6C,QAAS,KACnC,cAAC,IAAD,CAASC,KAAMf,EAAUf,QAASuB,OAEpC,eAAC,EAAD,CAAKvC,OAAQA,EAAb,UACE,cAAC,IAAD,CAAQmB,SAAUnB,EAAQ6C,QAAS,KACnC,cAAC,IAAD,CAASC,KAAMf,EAAUf,QAASuB,WC7B3BQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2f4aad40.chunk.js","sourcesContent":["import { GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport React from 'react';\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nfunction Map({ children, center }: any) {\r\n\r\n  const mapRef = React.useRef<GoogleMap>(null);\r\n\r\n  const mapOptions = (): google.maps.MapOptions => {\r\n    return {\r\n      center,\r\n      zoom: 14,\r\n      zoomControlOptions: { position: google.maps.ControlPosition.LEFT_CENTER, },\r\n      streetViewControlOptions: { position: google.maps.ControlPosition.LEFT_BOTTOM },\r\n      styles: [\r\n        { featureType: \"poi\", stylers: [{ \"visibility\": \"off\" }] },\r\n        { featureType: \"transit\", stylers: [{ \"visibility\": \"off\" }] },\r\n      ]\r\n    }\r\n  }\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\r\n  })\r\n\r\n  const onBoundsChanged = () => {\r\n    console.log(\"onBoundsChanged\", mapRef.current);\r\n  }\r\n  const onCenterChanged = () => {\r\n    console.log(\"onCenterChanged\");\r\n  }\r\n\r\n  const renderMap = () => <>\r\n    <GoogleMap ref={mapRef}\r\n      mapContainerStyle={containerStyle}\r\n      options={mapOptions()}\r\n      onBoundsChanged={onBoundsChanged}\r\n      onCenterChanged={onCenterChanged}\r\n    >\r\n      {children}\r\n    </GoogleMap>\r\n  </>\r\n\r\n  if (loadError) {\r\n    return <div>Map cannot be loaded</div>\r\n  }\r\n\r\n  return isLoaded ? renderMap() : <div>Loading the map...</div>\r\n}\r\nexport default Map;\r\n","import { Marker, Polygon } from '@react-google-maps/api';\nimport * as h3 from 'h3-js';\nimport React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nconst center = {\n  lat: 43.65,\n  lng: -79.38\n};\n\nconst h3Index = h3.geoToH3(center.lat, center.lng, 8);\n\nfunction h3ToPolyline(h3Index: string) {\n  let hexBoundary = h3.h3ToGeoBoundary(h3Index)\n  hexBoundary.push(hexBoundary[0])\n\n  let arr = []\n  for (const i of hexBoundary) {\n    arr.push({ lat: i[0], lng: i[1] })\n  }\n\n  return arr\n}\n\nconst polyline = h3ToPolyline(h3Index);\n\nconst polygonOptions: google.maps.PolygonOptions = {\n  fillColor: \"red\",\n  strokeColor: \"navy\",\n  strokeWeight: 1\n}\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      {/* <Map center={center} /> */}\n      <Map center={center}>\n        <Marker position={center} opacity={0.8} />\n        <Polygon path={polyline} options={polygonOptions} />\n      </Map>\n      <Map center={center}>\n        <Marker position={center} opacity={0.8} />\n        <Polygon path={polyline} options={polygonOptions} />\n      </Map>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}