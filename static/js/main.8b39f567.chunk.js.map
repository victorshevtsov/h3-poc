{"version":3,"sources":["components/MapInfo.module.scss","components/MapInfo.tsx","models/hexagon.ts","components/Hexagon.tsx","components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","MapMode","hexagon","h3Index","path","color","this","defaultOptions","strokeColor","strokeWeight","Hexagon","onMouseMove","onMouseDown","useState","options","setOptions","useEffect","prev","fillColor","fillOpacity","strokeOpacity","MapInfo","count","resolution","onModeChange","onResolutionChange","onSaveToFile","swithMode","mode","className","styles","Provider","value","size","style","verticalAlign","onClick","View","Draw","Erase","containerStyle","width","height","h3ToPath","h3","map","i","google","maps","LatLng","Map","center","zoom","children","onCenterChanged","onZoomChanged","mapRef","React","useRef","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","mapOptions","setMapOptions","scaleControl","mapTypeControl","streetViewControl","zoomControl","disableDoubleClickZoom","fullscreenControlOptions","position","ControlPosition","BOTTOM_RIGHT","featureType","stylers","newHexagons","toronto","forEach","push","setHexagons","hexagons","pointer","setPointer","setMode","setResolution","e","latLng","lat","lng","domEvent","buttons","toggleHexagon","create","index","findIndex","h","newHexagon","res","JSON","parse","stringify","splice","ref","mapContainerStyle","current","state","getZoom","centerLatLng","getCenter","newCenter","onDblClick","length","gestureHandling","newResolution","find","data","json","FileSaver","saveAs","Blob","App","setCenter","setZoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b39f567.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MapInfo\":\"MapInfo_MapInfo__-5P05\"};","import { IconContext } from \"react-icons\";\r\nimport { CgShapeHexagon } from \"react-icons/cg\";\r\nimport { FaEraser, FaPaintBrush } from \"react-icons/fa\";\r\nimport { FiHexagon, FiMove } from \"react-icons/fi\";\r\nimport styles from \"./MapInfo.module.scss\";\r\n\r\nexport enum MapMode { View, Draw, Erase }\r\n\r\ninterface MapInfoProps {\r\n  mode: MapMode;\r\n  resolution: number;\r\n  count: number;\r\n  onModeChange?: (e: MapInfoEvent) => void;\r\n  onResolutionChange: (resolution: number) => void;\r\n  onSaveToFile: () => void;\r\n}\r\n\r\nexport interface MapInfoEvent {\r\n  mode: MapMode;\r\n}\r\n\r\nconst MapInfo = ({ count, resolution, onModeChange, onResolutionChange, onSaveToFile }: MapInfoProps) => {\r\n  const swithMode = (mode: MapMode) => {\r\n    if (onModeChange)\r\n      onModeChange({ mode })\r\n  }\r\n\r\n  return <div className={styles.MapInfo}>\r\n    <IconContext.Provider value={{ color: \"gray\", className: \"global-class-name\", size: \"1.25em\", style: { verticalAlign: \"middle\" } }}>\r\n      <button onClick={() => swithMode(MapMode.View)}><FiMove /> View</button>\r\n      <button onClick={() => swithMode(MapMode.Draw)}><FaPaintBrush /> Draw</button>\r\n      <button onClick={() => swithMode(MapMode.Erase)}><FaEraser /> Erase</button>\r\n      <button onClick={() => onResolutionChange(--resolution)}><FiHexagon /> Bigger</button>\r\n      <button onClick={() => onResolutionChange(++resolution)}><CgShapeHexagon /> Smaller</button>\r\n      <div>\r\n        Resolution: {resolution}\r\n      </div>\r\n      <div>\r\n        Polygons: {count}\r\n      </div>\r\n      <button onClick={() => onSaveToFile()}><CgShapeHexagon /> Save</button>\r\n    </IconContext.Provider>\r\n  </div>\r\n}\r\n\r\nexport default MapInfo","export class hexagon {\r\n  h3Index: string;\r\n  path: google.maps.LatLng[];\r\n  color: string | undefined;\r\n\r\n  constructor(h3Index: string, path: google.maps.LatLng[], color: string) {\r\n    this.h3Index = h3Index;\r\n    this.path = path;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Polygon } from '@react-google-maps/api';\r\nimport { useEffect, useState } from \"react\";\r\nimport { hexagon } from '../models/hexagon';\r\n\r\nconst defaultOptions: google.maps.PolygonOptions = {\r\n  strokeColor: \"navy\",\r\n  strokeWeight: 1,\r\n}\r\n\r\ninterface HexagonProps {\r\n  hexagon: hexagon;\r\n  onMouseMove?: (e: google.maps.MapMouseEvent) => void;\r\n  onMouseDown?: (e: google.maps.MapMouseEvent) => void;\r\n}\r\n\r\nexport const Hexagon = ({ hexagon, onMouseMove, onMouseDown }: HexagonProps) => {\r\n\r\n  const [options, setOptions] = useState(defaultOptions)\r\n\r\n  useEffect(() => {\r\n    setOptions(prev => ({\r\n      ...prev,\r\n      fillColor: hexagon?.color, fillOpacity: 0.15,\r\n      strokeColor: hexagon?.color, strokeOpacity: 0.5\r\n    }))\r\n  }, [hexagon?.color])\r\n\r\n  return <Polygon\r\n    key={hexagon.h3Index}\r\n    path={hexagon.path}\r\n    options={options}\r\n    onMouseMove={onMouseMove}\r\n    onMouseDown={onMouseDown} />\r\n}\r\n","import { GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport FileSaver from \"file-saver\";\r\nimport * as h3 from 'h3-js';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { hexagon } from '../models/hexagon';\r\nimport { Hexagon } from './Hexagon';\r\nimport MapInfo, { MapInfoEvent, MapMode } from './MapInfo';\r\nimport toronto from \"../data/toronto.json\";\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst defaultResolution = 7;\r\n\r\nfunction h3ToPath(h3Index: string): google.maps.LatLng[] {\r\n  return h3.h3ToGeoBoundary(h3Index)\r\n    .map(i => new google.maps.LatLng(i[0], i[1]));\r\n}\r\n\r\ninterface MapProps {\r\n  center: { lat: number, lng: number };\r\n  zoom: number;\r\n  children?: any;\r\n  onCenterChanged?: (center: { lat: number; lng: number }) => void;\r\n  onZoomChanged?: (zoom: number) => void;\r\n}\r\n\r\nfunction Map({ center, zoom, children, onCenterChanged, onZoomChanged }: MapProps) {\r\n\r\n  const mapRef = React.useRef<GoogleMap>(null);\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\r\n  })\r\n\r\n  const [mapOptions, setMapOptions] = useState<google.maps.MapOptions>();\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setMapOptions({\r\n        scaleControl: true,\r\n        mapTypeControl: false,\r\n        streetViewControl: false,\r\n        zoomControl: false,\r\n        disableDoubleClickZoom: true,\r\n        fullscreenControlOptions: { position: google.maps.ControlPosition.BOTTOM_RIGHT },\r\n        styles: [\r\n          // { featureType: \"administrative\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"poi\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"transit\", stylers: [{ \"visibility\": \"off\" }] },\r\n        ]\r\n      });\r\n\r\n      const newHexagons: hexagon[] = [];\r\n      toronto.forEach(h3Index => {\r\n        newHexagons.push(new hexagon(h3Index, h3ToPath(h3Index), \"green\"))\r\n      });\r\n\r\n      setHexagons(newHexagons);\r\n    }\r\n  }, [isLoaded])\r\n\r\n  const [hexagons, setHexagons] = useState<hexagon[]>([]);\r\n\r\n  const [pointer, setPointer] = useState<hexagon | null>();\r\n\r\n  const [mode, setMode] = useState<MapMode>(MapMode.View)\r\n\r\n  const [resolution, setResolution] = useState(defaultResolution);\r\n\r\n  const onModeChange = (e: MapInfoEvent) => {\r\n    setMode(e.mode);\r\n    switch (e.mode) {\r\n      default:\r\n      case MapMode.View:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"auto\" })\r\n        setPointer(null);\r\n        break;\r\n      case MapMode.Draw:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"none\" })\r\n        break;\r\n      case MapMode.Erase:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"none\" })\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onResolutionChange = (newResolution: number) => {\r\n\r\n    const newHexagons: hexagon[] = [];\r\n    hexagons.forEach(h => {\r\n      if (newResolution > resolution) {\r\n        h3.h3ToChildren(h.h3Index, newResolution)\r\n          .forEach(h3Index => {\r\n            if (!newHexagons.find(h => h.h3Index === h3Index)) {\r\n              newHexagons.push(new hexagon(h3Index, h3ToPath(h3Index), \"green\"));\r\n            }\r\n          })\r\n      } else {\r\n        const h3Index = h3.h3ToParent(h.h3Index, newResolution);\r\n        if (!newHexagons.find(h => h.h3Index === h3Index)) {\r\n          newHexagons.push(new hexagon(h3Index, h3ToPath(h3Index), \"green\"));\r\n        }\r\n      }\r\n    });\r\n\r\n    setResolution(newResolution);\r\n    setHexagons(newHexagons);\r\n  }\r\n\r\n  const onMouseMove = (e: google.maps.MapMouseEvent) => {\r\n    if (mode === MapMode.View)\r\n      return;\r\n\r\n    if (!e.latLng)\r\n      return;\r\n\r\n    const h3Index = h3.geoToH3(e.latLng?.lat(), e.latLng?.lng(), resolution);\r\n\r\n    if (pointer?.h3Index !== h3Index) {\r\n      setPointer(new hexagon(h3Index, h3ToPath(h3Index), \"gray\"));\r\n    }\r\n\r\n    if ((e.domEvent as MouseEvent).buttons === 1) {\r\n\r\n      if (mode === MapMode.Draw) {\r\n        toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n      } else if (mode === MapMode.Erase) {\r\n        toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), false);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMouseDown = (e: google.maps.MapMouseEvent) => {\r\n    if (mode === MapMode.View)\r\n      return;\r\n\r\n    if (!e.latLng)\r\n      return;\r\n\r\n    if ((e.domEvent as MouseEvent).buttons === 1) {\r\n      if (mode === MapMode.Draw) {\r\n        setPointer(null);\r\n        toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n      } else {\r\n        toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), false);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onMapZoomChanged = () => {\r\n    if (mapRef.current) {\r\n      const zoom = mapRef.current?.state.map?.getZoom()\r\n      if (zoom && onZoomChanged)\r\n        onZoomChanged(zoom)\r\n    }\r\n  }\r\n\r\n  const onMapCenterChanged = () => {\r\n    let centerLatLng = mapRef.current?.state.map?.getCenter();\r\n\r\n    if (centerLatLng) {\r\n      let newCenter = { lat: centerLatLng.lat(), lng: centerLatLng.lng() }\r\n\r\n      if (newCenter.lat !== center.lat && newCenter.lng !== center.lng && onCenterChanged) {\r\n        onCenterChanged(newCenter);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onDblClick = (e: google.maps.MapMouseEvent) => {\r\n    if (e.latLng) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n    }\r\n  }\r\n\r\n  const toggleHexagon = (lat: number, lng: number, create: boolean) => {\r\n    const h3Index = h3.geoToH3(lat, lng, resolution);\r\n\r\n    let index = hexagons.findIndex(h => h.h3Index === h3Index);\r\n\r\n    if (index === -1 && create) {\r\n\r\n      const path = h3ToPath(h3Index);\r\n      const color = \"green\";\r\n\r\n      const newHexagon = new hexagon(h3Index, path, color);\r\n\r\n      setHexagons((prev) => {\r\n        let res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.push(newHexagon);\r\n        return res;\r\n      })\r\n    }\r\n\r\n    if (index !== -1 && !create) {\r\n      setHexagons((prev) => {\r\n        const res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.splice(index, 1)\r\n        return res;\r\n      });\r\n    }\r\n  }\r\n\r\n  const onSaveToFile = () => {\r\n    let data = hexagons.map(h => ({ h3Index: h.h3Index, path: h.path }));\r\n    let json = JSON.stringify(data, null, 2)\r\n\r\n    FileSaver.saveAs(new Blob([json]), \"hexagons.json\")\r\n  }\r\n\r\n  return <>\r\n    {loadError ?\r\n      <div>Map cannot be loaded</div>\r\n      :\r\n      isLoaded ?\r\n        <GoogleMap ref={mapRef}\r\n          center={center}\r\n          zoom={zoom}\r\n          mapContainerStyle={containerStyle}\r\n          options={mapOptions}\r\n          onZoomChanged={onMapZoomChanged}\r\n          onCenterChanged={onMapCenterChanged}\r\n          onMouseMove={onMouseMove}\r\n          onDblClick={onDblClick}\r\n        >\r\n          {children}\r\n\r\n          {hexagons.map(hexagon =>\r\n            <Hexagon key={hexagon.h3Index}\r\n              hexagon={hexagon}\r\n              onMouseMove={onMouseMove}\r\n              onMouseDown={onMouseDown} />\r\n          )}\r\n\r\n          {pointer &&\r\n            <Hexagon hexagon={pointer}\r\n              onMouseMove={onMouseMove}\r\n              onMouseDown={onMouseDown} />}\r\n\r\n          <MapInfo\r\n            mode={MapMode.View}\r\n            resolution={resolution}\r\n            count={hexagons.length}\r\n            onModeChange={onModeChange}\r\n            onResolutionChange={onResolutionChange}\r\n            onSaveToFile={onSaveToFile} />\r\n        </GoogleMap>\r\n        :\r\n        <div>Loading the map...</div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default Map;\r\n","import { useState } from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nfunction App() {\n  const [center, setCenter] = useState({ lat: 43.65, lng: -79.38 })\n  const [zoom, setZoom] = useState(10)\n\n  return (\n    <div className=\"App\" >\n      <Map zoom={zoom}\n        center={center}\n        onZoomChanged={setZoom}\n        onCenterChanged={setCenter} />\n      {/* <Map\n        zoom={zoom}\n        center={center}\n        onZoomChanged={setZoom}\n        onCenterChanged={setCenter} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}