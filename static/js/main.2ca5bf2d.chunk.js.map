{"version":3,"sources":["components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["containerStyle","width","height","polygonOptions","fillColor","strokeColor","strokeWeight","Hexagons","hexs","hexagons","map","hex","i","path","options","Map","children","center","mapRef","React","useRef","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","useState","mapOptions","setMapOptions","useEffect","zoom","disableDoubleClickZoom","zoomControlOptions","position","google","maps","ControlPosition","LEFT_CENTER","streetViewControlOptions","LEFT_BOTTOM","styles","featureType","stylers","location","setLocation","setHexes","ref","mapContainerStyle","onCenterChanged","cntr","current","state","getCenter","onRightClick","e","latLng","polyline","h3Index","h3","lat","lng","h3ToPolyline","s","console","log","res","JSON","parse","stringify","push","className","App","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ca5bf2d.chunk.js","sourcesContent":["import { Polygon, GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport React, { useEffect, useState } from 'react';\r\nimport * as h3 from 'h3-js';\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst polygonOptions: google.maps.PolygonOptions = {\r\n  fillColor: \"red\",\r\n  strokeColor: \"navy\",\r\n  strokeWeight: 1\r\n}\r\n\r\nfunction h3ToPolyline(h3Index: string) {\r\n  return h3.h3ToGeoBoundary(h3Index).map(i => ({ lat: i[0], lng: i[1] }));\r\n}\r\n\r\nfunction Hexagons({ hexagons }: any) {\r\n  const hexs = hexagons as { lat: number, lng: number }[][];\r\n\r\n  return <>\r\n    {hexs.map((hex, i) =>\r\n      <Polygon key={i} path={hex} options={polygonOptions} />\r\n    )}\r\n  </>\r\n}\r\n\r\nfunction Map({ children, center }: any) {\r\n\r\n  const mapRef = React.useRef<GoogleMap>(null);\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\r\n  })\r\n\r\n  const [mapOptions, setMapOptions] = useState<google.maps.MapOptions>();\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setMapOptions({\r\n        center,\r\n        zoom: 14,\r\n        disableDoubleClickZoom: true,\r\n        zoomControlOptions: { position: google.maps.ControlPosition.LEFT_CENTER, },\r\n        streetViewControlOptions: { position: google.maps.ControlPosition.LEFT_BOTTOM },\r\n        styles: [\r\n          { featureType: \"poi\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"transit\", stylers: [{ \"visibility\": \"off\" }] },\r\n        ]\r\n      })\r\n    }\r\n  }, [isLoaded, center])\r\n\r\n  const [location, setLocation] = useState<google.maps.LatLng | undefined>(center);\r\n\r\n  const [hexagons, setHexes] = useState<{ lat: number, lng: number }[][]>([]);\r\n\r\n  const onCenterChanged = () => {\r\n    const cntr = mapRef.current?.state.map?.getCenter();\r\n    setLocation(cntr);\r\n  }\r\n\r\n  const onDblClick = (e: google.maps.MapMouseEvent) => {\r\n    if (!e.latLng)\r\n      return;\r\n\r\n    const h3Index = h3.geoToH3(e.latLng?.lat(), e.latLng?.lng(), 7);\r\n\r\n    const polyline = h3ToPolyline(h3Index);\r\n\r\n    setHexes((s) => {\r\n      console.log(s);\r\n\r\n      let res = JSON.parse(JSON.stringify(s)) as { lat: number, lng: number }[][];\r\n      res.push(polyline)\r\n      return res;\r\n    });\r\n  }\r\n\r\n  return <>\r\n    {loadError ?\r\n      <div>Map cannot be loaded</div>\r\n      :\r\n      isLoaded ?\r\n        <GoogleMap ref={mapRef}\r\n          mapContainerStyle={containerStyle}\r\n          options={mapOptions}\r\n          onCenterChanged={onCenterChanged}\r\n          onRightClick={onDblClick}\r\n        >\r\n          {children}\r\n          <div className=\"MapPanel\">Loction: {JSON.stringify(location)}\r\n\r\n          </div>\r\n          <Hexagons hexagons={hexagons} />\r\n        </GoogleMap>\r\n        :\r\n        <div>Loading the map...</div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default Map;\r\n","import { Marker, Polygon } from '@react-google-maps/api';\nimport * as h3 from 'h3-js';\nimport React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nconst center = {\n  lat: 43.65,\n  lng: -79.38\n};\n\nconst h3Index = h3.geoToH3(center.lat, center.lng, 8);\nconst polyline = h3.h3ToGeoBoundary(h3Index).map(i => ({ lat: i[0], lng: i[1] }))\n\nconst polygonOptions: google.maps.PolygonOptions = {\n  fillColor: \"red\",\n  strokeColor: \"navy\",\n  strokeWeight: 1\n}\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      {/* <Map center={center} /> */}\n      <Map center={center}>\n        <Marker position={center} opacity={0.8} />\n        <Polygon path={polyline} options={polygonOptions} />\n        <div className=\"MapPanel\">Left Map</div>\n      </Map>\n      {/* <Map center={center}>\n        <Marker position={center} opacity={0.8} />\n        <Polygon path={polyline} options={polygonOptions} />\n        <div style={divStyles}>Right Map</div>\n      </Map> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}