{"version":3,"sources":["components/MapInfo.module.scss","components/MapInfo.tsx","models/hexagon.ts","components/Hexagon.tsx","components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","MapMode","hexagon","h3Index","path","color","this","defaultOptions","strokeColor","strokeWeight","Hexagon","onMouseMove","onDblClick","useState","options","setOptions","useEffect","prev","fillColor","MapInfo","count","onModeChange","swithMode","mode","className","styles","onClick","View","Draw","Erase","containerStyle","width","height","h3ToPath","h3","map","i","google","maps","LatLng","Map","center","zoom","children","onCenterChanged","onZoomChanged","mapRef","React","useRef","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","mapOptions","setMapOptions","scaleControl","mapTypeControl","streetViewControl","zoomControl","disableDoubleClickZoom","fullscreenControlOptions","position","ControlPosition","BOTTOM_RIGHT","featureType","stylers","hexagons","setHexagons","pointer","setPointer","e","latLng","domEvent","ctrlKey","toggleHexagon","lat","lng","shiftKey","create","index","findIndex","h","newHexagon","res","JSON","parse","stringify","push","splice","ref","mapContainerStyle","current","state","getZoom","centerLatLng","getCenter","newCenter","length","gestureHandling","App","setCenter","setZoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b88e545c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MapInfo\":\"MapInfo_MapInfo__-5P05\"};","import styles from \"./MapInfo.module.scss\";\r\n\r\nexport enum MapMode { View, Draw, Erase }\r\n\r\n// const defaultState = {\r\n//   mode: MapMode.View\r\n// }\r\n\r\ninterface MapInfoProps {\r\n  mode: MapMode;\r\n  count: number;\r\n  onModeChange?: (e: MapInfoEvent) => void;\r\n}\r\n\r\nexport interface MapInfoEvent {\r\n  mode: MapMode\r\n}\r\n\r\nconst MapInfo = ({ count, onModeChange }: MapInfoProps) => {\r\n  // const [state, setState] = useState(defaultState);\r\n\r\n  const swithMode = (mode: MapMode) => {\r\n    if (onModeChange)\r\n      onModeChange({ mode })\r\n  }\r\n\r\n  return <div className={styles.MapInfo}>\r\n    <button onClick={() => swithMode(MapMode.View)}>View</button>\r\n    <button onClick={() => swithMode(MapMode.Draw)}>Draw</button>\r\n    <button onClick={() => swithMode(MapMode.Erase)}>Erase</button>\r\n    <div>\r\n      {count}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MapInfo","export class hexagon {\r\n  h3Index: string;\r\n  path: google.maps.LatLng[];\r\n  color: string | undefined;\r\n\r\n  constructor(h3Index: string, path: google.maps.LatLng[], color: string) {\r\n    this.h3Index = h3Index;\r\n    this.path = path;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Polygon } from '@react-google-maps/api';\r\nimport { useEffect, useState } from \"react\";\r\nimport { hexagon } from '../models/hexagon';\r\n\r\nconst defaultOptions: google.maps.PolygonOptions = {\r\n  strokeColor: \"navy\",\r\n  strokeWeight: 1,\r\n}\r\n\r\ninterface HexagonProps {\r\n  hexagon: hexagon;\r\n  onMouseMove?: (e: google.maps.MapMouseEvent) => void;\r\n  onDblClick?: (e: google.maps.MapMouseEvent) => void;\r\n}\r\n\r\nexport const Hexagon = ({ hexagon, onMouseMove, onDblClick }: HexagonProps) => {\r\n\r\n  const [options, setOptions] = useState(defaultOptions)\r\n\r\n  useEffect(() => {\r\n    setOptions(prev => ({ ...prev, fillColor: hexagon?.color }))\r\n  }, [hexagon?.color])\r\n\r\n  return <Polygon\r\n    key={hexagon.h3Index}\r\n    path={hexagon.path}\r\n    options={options}\r\n    onMouseMove={onMouseMove}\r\n    onDblClick={onDblClick} />\r\n}\r\n","import { GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport * as h3 from 'h3-js';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { hexagon } from '../models/hexagon';\r\nimport { Hexagon } from './Hexagon';\r\nimport MapInfo, { MapInfoEvent, MapMode } from './MapInfo';\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst resolution = 8;\r\n\r\nfunction h3ToPath(h3Index: string): google.maps.LatLng[] {\r\n  return h3.h3ToGeoBoundary(h3Index)\r\n    .map(i => new google.maps.LatLng(i[0], i[1]));\r\n}\r\n\r\ninterface MapProps {\r\n  center: { lat: number, lng: number };\r\n  zoom: number;\r\n  children?: any;\r\n  onCenterChanged?: (center: { lat: number; lng: number }) => void;\r\n  onZoomChanged?: (zoom: number) => void;\r\n}\r\n\r\nfunction Map({ center, zoom, children, onCenterChanged, onZoomChanged }: MapProps) {\r\n\r\n  const mapRef = React.useRef<GoogleMap>(null);\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\r\n  })\r\n\r\n  const [mapOptions, setMapOptions] = useState<google.maps.MapOptions>();\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      setMapOptions({\r\n        scaleControl: true,\r\n        mapTypeControl: false,\r\n        streetViewControl: false,\r\n        zoomControl: false,\r\n        disableDoubleClickZoom: true,\r\n        fullscreenControlOptions: { position: google.maps.ControlPosition.BOTTOM_RIGHT },\r\n        styles: [\r\n          { featureType: \"administrative\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"poi\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"transit\", stylers: [{ \"visibility\": \"off\" }] },\r\n        ]\r\n      })\r\n    }\r\n  }, [isLoaded])\r\n\r\n  const [hexagons, setHexagons] = useState<hexagon[]>([]);\r\n\r\n  const [pointer, setPointer] = useState<hexagon>();\r\n\r\n  const onModeChange = (e: MapInfoEvent) => {\r\n    switch (e.mode) {\r\n      default:\r\n      case MapMode.View:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"auto\" })\r\n        break;\r\n      case MapMode.Draw:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"none\" })\r\n        break;\r\n      case MapMode.Erase:\r\n        mapRef.current?.state.map?.setOptions({ gestureHandling: \"none\" })\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onMouseMove = (e: google.maps.MapMouseEvent) => {\r\n    if (!e.latLng)\r\n      return;\r\n\r\n    if ((e.domEvent as KeyboardEvent).ctrlKey) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n    }\r\n    else if ((e.domEvent as KeyboardEvent).shiftKey) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), false);\r\n    }\r\n\r\n    const h3Index = h3.geoToH3(e.latLng?.lat(), e.latLng?.lng(), resolution);\r\n\r\n    if (pointer?.h3Index !== h3Index) {\r\n      const path = h3ToPath(h3Index);\r\n      const color = \"gray\";\r\n\r\n      setPointer(new hexagon(h3Index, path, color));\r\n    }\r\n  }\r\n\r\n  const onMapZoomChanged = () => {\r\n    if (mapRef.current) {\r\n      const zoom = mapRef.current?.state.map?.getZoom()\r\n      if (zoom && onZoomChanged)\r\n        onZoomChanged(zoom)\r\n    }\r\n  }\r\n\r\n  const onMapCenterChanged = () => {\r\n    let centerLatLng = mapRef.current?.state.map?.getCenter();\r\n\r\n    if (centerLatLng) {\r\n      let newCenter = { lat: centerLatLng.lat(), lng: centerLatLng.lng() }\r\n\r\n      if (newCenter.lat !== center.lat && newCenter.lng !== center.lng && onCenterChanged) {\r\n        onCenterChanged(newCenter);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onDblClick = (e: google.maps.MapMouseEvent) => {\r\n    if (e.latLng) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n    }\r\n  }\r\n\r\n  const toggleHexagon = (lat: number, lng: number, create: boolean) => {\r\n    const h3Index = h3.geoToH3(lat, lng, resolution);\r\n\r\n    let index = hexagons.findIndex(h => h.h3Index === h3Index);\r\n\r\n    if (index === -1 && create) {\r\n\r\n      const path = h3ToPath(h3Index);\r\n      const color = \"green\";\r\n\r\n      const newHexagon = new hexagon(h3Index, path, color);\r\n\r\n      setHexagons((prev) => {\r\n        let res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.push(newHexagon);\r\n        return res;\r\n      })\r\n    }\r\n\r\n    if (index !== -1 && !create) {\r\n      setHexagons((prev) => {\r\n        const res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.splice(index, 1)\r\n        return res;\r\n      });\r\n    }\r\n  }\r\n\r\n  return <>\r\n    {loadError ?\r\n      <div>Map cannot be loaded</div>\r\n      :\r\n      isLoaded ?\r\n        <GoogleMap ref={mapRef}\r\n          center={center}\r\n          zoom={zoom}\r\n          mapContainerStyle={containerStyle}\r\n          options={mapOptions}\r\n          onZoomChanged={onMapZoomChanged}\r\n          onCenterChanged={onMapCenterChanged}\r\n          onMouseMove={onMouseMove}\r\n          onDblClick={onDblClick}\r\n        >\r\n          {children}\r\n\r\n          {hexagons.map(hexagon =>\r\n            <Hexagon key={hexagon.h3Index}\r\n              hexagon={hexagon}\r\n              onMouseMove={onMouseMove}\r\n              onDblClick={onDblClick} />\r\n          )}\r\n\r\n          {pointer &&\r\n            <Hexagon hexagon={pointer}\r\n              onMouseMove={onMouseMove}\r\n              onDblClick={onDblClick} />}\r\n\r\n          <MapInfo\r\n            mode={MapMode.View}\r\n            count={hexagons.length}\r\n            onModeChange={onModeChange} />\r\n        </GoogleMap>\r\n        :\r\n        <div>Loading the map...</div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default Map;\r\n","import { useState } from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nfunction App() {\n  const [center, setCenter] = useState({ lat: 43.65, lng: -79.38 })\n  const [zoom, setZoom] = useState(12)\n\n  return (\n    <div className=\"App\" >\n      <Map zoom={zoom}\n        center={center}\n        onZoomChanged={setZoom}\n        onCenterChanged={setCenter} />\n      <Map\n        zoom={zoom}\n        center={center}\n        onZoomChanged={setZoom}\n        onCenterChanged={setCenter} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}