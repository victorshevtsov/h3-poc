{"version":3,"sources":["models/hexagon.ts","components/Hexagon.tsx","components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["hexagon","h3Index","path","color","this","defaultOptions","strokeColor","strokeWeight","Hexagon","onMouseMove","onDblClick","useState","options","setOptions","useEffect","prev","fillColor","containerStyle","width","height","h3ToPath","h3","map","i","google","maps","LatLng","Map","children","center","mapRef","React","useRef","useLoadScript","googleMapsApiKey","process","version","isLoaded","loadError","mapOptions","setMapOptions","current","console","log","event","addDomListener","zoom","gestureHandling","disableDoubleClickZoom","zoomControlOptions","position","ControlPosition","LEFT_CENTER","streetViewControlOptions","LEFT_BOTTOM","styles","featureType","stylers","setLocation","hexagons","setHexagons","pointer","setPointer","e","latLng","domEvent","ctrlKey","toggleHexagon","lat","lng","shiftKey","create","index","findIndex","h","newHexagon","res","JSON","parse","stringify","push","splice","ref","mapContainerStyle","onCenterChanged","state","getCenter","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bf4e107.chunk.js","sourcesContent":["export class hexagon {\r\n  h3Index: string;\r\n  path: google.maps.LatLng[];\r\n  color: string | undefined;\r\n\r\n  constructor(h3Index: string, path: google.maps.LatLng[], color: string) {\r\n    this.h3Index = h3Index;\r\n    this.path = path;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Polygon } from '@react-google-maps/api';\r\nimport { useEffect, useState } from \"react\";\r\nimport { hexagon } from '../models/hexagon';\r\n\r\nconst defaultOptions: google.maps.PolygonOptions = {\r\n  strokeColor: \"navy\",\r\n  strokeWeight: 1,\r\n}\r\n\r\nexport interface HexagonProps {\r\n  hexagon: hexagon;\r\n  onMouseMove?: (e: google.maps.MapMouseEvent) => void;\r\n  onDblClick?: (e: google.maps.MapMouseEvent) => void;\r\n}\r\n\r\nexport const Hexagon = ({ hexagon, onMouseMove, onDblClick }: HexagonProps) => {\r\n\r\n  const [options, setOptions] = useState(defaultOptions)\r\n\r\n  useEffect(() => {\r\n    setOptions(prev => ({ ...prev, fillColor: hexagon?.color }))\r\n  }, [hexagon?.color])\r\n\r\n  return <Polygon\r\n    key={hexagon.h3Index}\r\n    path={hexagon.path}\r\n    options={options}\r\n    onMouseMove={onMouseMove}\r\n    onDblClick={onDblClick} />\r\n}\r\n","import { GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport * as h3 from 'h3-js';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { hexagon } from '../models/hexagon';\r\nimport { Hexagon } from './Hexagon';\r\n\r\ninterface MapProps {\r\n  children?: any;\r\n  center: { lat: number, lng: number };\r\n}\r\n\r\nconst containerStyle: React.CSSProperties = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst resolution = 8;\r\n\r\nfunction h3ToPath(h3Index: string): google.maps.LatLng[] {\r\n  return h3.h3ToGeoBoundary(h3Index)\r\n    .map(i => new google.maps.LatLng(i[0], i[1]));\r\n}\r\n\r\nfunction Map({ children, center }: MapProps) {\r\n\r\n  const mapRef = React.useRef<GoogleMap>(null);\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string,\r\n    version: \"3\"\r\n  })\r\n\r\n  const [mapOptions, setMapOptions] = useState<google.maps.MapOptions>();\r\n\r\n  useEffect(() => {\r\n    if (isLoaded) {\r\n      // mapRef.current?.state.map?.addListener(\"mousemove\", () => {\r\n      //   console.log(\"keydown\");\r\n      // })\r\n\r\n      if (mapRef.current) {\r\n        console.log(\"keydown\");\r\n        google.maps.event.addDomListener(mapRef.current, \"keydown\", () => {\r\n        })\r\n      }\r\n\r\n      setMapOptions({\r\n        center,\r\n        zoom: 14,\r\n        gestureHandling: \"greedy\",\r\n        disableDoubleClickZoom: true,\r\n        zoomControlOptions: { position: google.maps.ControlPosition.LEFT_CENTER, },\r\n        streetViewControlOptions: { position: google.maps.ControlPosition.LEFT_BOTTOM },\r\n        styles: [\r\n          { featureType: \"poi\", stylers: [{ \"visibility\": \"off\" }] },\r\n          { featureType: \"transit\", stylers: [{ \"visibility\": \"off\" }] },\r\n        ]\r\n      })\r\n    }\r\n  }, [isLoaded, center])\r\n\r\n  const [, setLocation] = useState<{ lat: number, lng: number }>(center);\r\n\r\n  const [hexagons, setHexagons] = useState<hexagon[]>([]);\r\n\r\n  const [pointer, setPointer] = useState<hexagon>();\r\n\r\n  const onMouseMove = (e: google.maps.MapMouseEvent) => {\r\n    if (!e.latLng)\r\n      return;\r\n\r\n    if ((e.domEvent as KeyboardEvent).ctrlKey) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n    }\r\n    else if ((e.domEvent as KeyboardEvent).shiftKey) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), false);\r\n    }\r\n\r\n    const h3Index = h3.geoToH3(e.latLng?.lat(), e.latLng?.lng(), resolution);\r\n\r\n    if (pointer?.h3Index !== h3Index) {\r\n      const path = h3ToPath(h3Index);\r\n      const color = \"gray\";\r\n\r\n      setPointer(new hexagon(h3Index, path, color));\r\n    }\r\n  }\r\n\r\n  const onCenterChanged = () => {\r\n    const center = mapRef.current?.state.map?.getCenter();\r\n    if (center) {\r\n      setLocation({ lat: center.lat(), lng: center.lng() });\r\n    }\r\n  }\r\n\r\n  const onDblClick = (e: google.maps.MapMouseEvent) => {\r\n    if (e.latLng) {\r\n      toggleHexagon(e.latLng?.lat(), e.latLng?.lng(), true);\r\n    }\r\n  }\r\n\r\n  const toggleHexagon = (lat: number, lng: number, create: boolean) => {\r\n    const h3Index = h3.geoToH3(lat, lng, resolution);\r\n\r\n    let index = hexagons.findIndex(h => h.h3Index === h3Index);\r\n\r\n    if (index === -1 && create) {\r\n\r\n      const path = h3ToPath(h3Index);\r\n      const color = \"green\";\r\n\r\n      const newHexagon = new hexagon(h3Index, path, color);\r\n\r\n      setHexagons((prev) => {\r\n        let res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.push(newHexagon);\r\n        return res;\r\n      })\r\n    }\r\n\r\n    if (index !== -1 && !create) {\r\n      setHexagons((prev) => {\r\n        const res = JSON.parse(JSON.stringify(prev)) as hexagon[];\r\n        res.splice(index, 1)\r\n        return res;\r\n      });\r\n    }\r\n  }\r\n\r\n  // const onToggle = (e: any) => {\r\n  //   let opts: google.maps.MapOptions = {\r\n  //     draggable: false\r\n  //     // gestureHandling: \"none\"\r\n  //   }\r\n  //   if (mapOptions)\r\n  //     console.log(mapRef.current?.state.map?.setOptions(opts));\r\n  // }\r\n\r\n  return <>\r\n    {loadError ?\r\n      <div>Map cannot be loaded</div>\r\n      :\r\n      isLoaded ?\r\n        <GoogleMap ref={mapRef}\r\n          mapContainerStyle={containerStyle}\r\n          options={mapOptions}\r\n          onCenterChanged={onCenterChanged}\r\n          onMouseMove={onMouseMove}\r\n          onDblClick={onDblClick}\r\n\r\n        >\r\n          {children}\r\n          {/* \r\n          <div className=\"MapPanel\">\r\n            Loction: {JSON.stringify(location)}\r\n            <button onClick={onToggle} >Edit</button>\r\n          </div> */}\r\n\r\n          {hexagons.map(hexagon =>\r\n            <Hexagon key={hexagon.h3Index}\r\n              hexagon={hexagon}\r\n              onMouseMove={onMouseMove}\r\n              onDblClick={onDblClick} />\r\n          )}\r\n\r\n          {pointer &&\r\n            <Hexagon hexagon={pointer}\r\n              onMouseMove={onMouseMove}\r\n              onDblClick={onDblClick} />}\r\n\r\n        </GoogleMap>\r\n        :\r\n        <div>Loading the map...</div>\r\n    }\r\n  </>\r\n}\r\n\r\nexport default Map;\r\n","import './App.css';\nimport Map from './components/Map';\n\nconst center = {\n  lat: 43.65,\n  lng: -79.38\n};\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Map center={center} />\n      {/* <Map center={center}>\n        <div className=\"MapPanel\">Left Map</div>\n      </Map>\n      <Map center={center}>\n      <div className=\"MapPanel\">Right Map</div>\n      </Map> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}